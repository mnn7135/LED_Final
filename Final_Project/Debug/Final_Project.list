
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08001538  08001538  00011538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016b0  080016b0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080016b0  080016b0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016b0  080016b0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016b4  080016b4  000116b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080016b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000018  080016d0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080016d0  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d02  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001157  00000000  00000000  00025d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a8  00000000  00000000  00026ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000320  00000000  00000000  00027250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254a5  00000000  00000000  00027570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ed9  00000000  00000000  0004ca15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e362c  00000000  00000000  000518ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c2c  00000000  00000000  00134f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001520 	.word	0x08001520

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08001520 	.word	0x08001520

080001c8 <GPIO_Output_Init>:
// GPIO Output initialization for GPIO banks A, B, C, and D only
// Expects GPIO to be GPIOA, GPIOB, GPIOC, or GPIOD.
// pin is expected to be 0 through 15
// Note -- if the clock is not enabled the 16 GPIO pins are non-functional!
void GPIO_Output_Init( GPIO_TypeDef *GPIO, uint32_t pin )
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	// Enable the peripheral clocks of for GPIO
	if ( GPIO == GPIOA )
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80001d8:	d106      	bne.n	80001e8 <GPIO_Output_Init+0x20>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN ;
 80001da:	4b36      	ldr	r3, [pc, #216]	; (80002b4 <GPIO_Output_Init+0xec>)
 80001dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001de:	4a35      	ldr	r2, [pc, #212]	; (80002b4 <GPIO_Output_Init+0xec>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001e6:	e01f      	b.n	8000228 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOB )
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4a33      	ldr	r2, [pc, #204]	; (80002b8 <GPIO_Output_Init+0xf0>)
 80001ec:	4293      	cmp	r3, r2
 80001ee:	d106      	bne.n	80001fe <GPIO_Output_Init+0x36>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN ;
 80001f0:	4b30      	ldr	r3, [pc, #192]	; (80002b4 <GPIO_Output_Init+0xec>)
 80001f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f4:	4a2f      	ldr	r2, [pc, #188]	; (80002b4 <GPIO_Output_Init+0xec>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001fc:	e014      	b.n	8000228 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOC )
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a2e      	ldr	r2, [pc, #184]	; (80002bc <GPIO_Output_Init+0xf4>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d106      	bne.n	8000214 <GPIO_Output_Init+0x4c>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN ;
 8000206:	4b2b      	ldr	r3, [pc, #172]	; (80002b4 <GPIO_Output_Init+0xec>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	4a2a      	ldr	r2, [pc, #168]	; (80002b4 <GPIO_Output_Init+0xec>)
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000212:	e009      	b.n	8000228 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOD )
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4a2a      	ldr	r2, [pc, #168]	; (80002c0 <GPIO_Output_Init+0xf8>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d145      	bne.n	80002a8 <GPIO_Output_Init+0xe0>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN ;
 800021c:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <GPIO_Output_Init+0xec>)
 800021e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000220:	4a24      	ldr	r2, [pc, #144]	; (80002b4 <GPIO_Output_Init+0xec>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	64d3      	str	r3, [r2, #76]	; 0x4c
	else
		return ;

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIO->MODER &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // clear to input mode (00)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	2103      	movs	r1, #3
 8000232:	fa01 f303 	lsl.w	r3, r1, r3
 8000236:	43db      	mvns	r3, r3
 8000238:	401a      	ands	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	601a      	str	r2, [r3, #0]
	GPIO->MODER |= (uint32_t)1 << ( 2 * pin ) ;      //  Output(01)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2101      	movs	r1, #1
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	431a      	orrs	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIO->OSPEEDR &= ~( (uint32_t)3 << ( 2 * pin ) ) ;	// set to cleared which is low speed
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	689a      	ldr	r2, [r3, #8]
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	2103      	movs	r1, #3
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	43db      	mvns	r3, r3
 8000262:	401a      	ands	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	609a      	str	r2, [r3, #8]
	GPIO->OSPEEDR |=   (uint32_t)3 << ( 2 * pin ) ;  // High speed
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	2103      	movs	r1, #3
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
 8000276:	431a      	orrs	r2, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	609a      	str	r2, [r3, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIO->OTYPER &= ~( (uint32_t)1 << pin ) ;       // Push-pull
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	2101      	movs	r1, #1
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	fa01 f303 	lsl.w	r3, r1, r3
 8000288:	43db      	mvns	r3, r3
 800028a:	401a      	ands	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	605a      	str	r2, [r3, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIO->PUPDR   &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // No pull-up, no pull-down
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	68da      	ldr	r2, [r3, #12]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	2103      	movs	r1, #3
 800029a:	fa01 f303 	lsl.w	r3, r1, r3
 800029e:	43db      	mvns	r3, r3
 80002a0:	401a      	ands	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	e000      	b.n	80002aa <GPIO_Output_Init+0xe2>
		return ;
 80002a8:	bf00      	nop
}
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40021000 	.word	0x40021000
 80002b8:	48000400 	.word	0x48000400
 80002bc:	48000800 	.word	0x48000800
 80002c0:	48000c00 	.word	0x48000c00

080002c4 <LED_Init>:

// set up PA5, PA6, and PA7 to drive LEDs
void LED_Init(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	GPIO_Output_Init( GPIOA, NUCLEO_GREEN_LED_PIN ) ;	// hard wired PA5 to on-board LD2 LED
 80002c8:	2105      	movs	r1, #5
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ce:	f7ff ff7b 	bl	80001c8 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D12 ) ;		// init PA6 as output (D12)
 80002d2:	2106      	movs	r1, #6
 80002d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d8:	f7ff ff76 	bl	80001c8 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D11 ) ;		// init PA7 as output (D11)
 80002dc:	2107      	movs	r1, #7
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f7ff ff71 	bl	80001c8 <GPIO_Output_Init>
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}

080002ea <GREEN_LED_On>:

//******************************************************************************************
// Turn Green LED On
//******************************************************************************************
void GREEN_LED_On(void){
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D12 ;	// PA6
 80002ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002fc:	6153      	str	r3, [r2, #20]
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <GREEN_LED_Off>:

//******************************************************************************************
// Turn Green LED Off
//******************************************************************************************
void GREEN_LED_Off(void){
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D12 ) ;	// PA6
 800030c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800031a:	6153      	str	r3, [r2, #20]
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <GREEN_LED_Toggle>:

//******************************************************************************************
// Set Green LD2 Nucleo LED to opposite states
//******************************************************************************************
void GREEN_LED_Toggle(void){
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D12 ;	// PA6
 800032a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000334:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000338:	6153      	str	r3, [r2, #20]
}
 800033a:	bf00      	nop
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <RED_LED_On>:

//******************************************************************************************
// Turn GPIOA 6 and 7 to ON (RED LED)
//******************************************************************************************
void RED_LED_On(void){
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D11 ;	// PA7
 8000348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000356:	6153      	str	r3, [r2, #20]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <RED_LED_Off>:

//******************************************************************************************
// Turn GPIOA 6 and 7 to OFF (RED LED)
//******************************************************************************************
void RED_LED_Off(void){
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D11 ) ;	// PA7
 8000366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000374:	6153      	str	r3, [r2, #20]
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <RED_LED_Toggle>:

//******************************************************************************************
// Set GPIOA 6 and 7 to opposite states (RED LED)
//******************************************************************************************
void RED_LED_Toggle(void){
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D11 ;	// PA7
 8000384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800038e:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000392:	6153      	str	r3, [r2, #20]
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
	...

080003a0 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80003a6:	4b6b      	ldr	r3, [pc, #428]	; (8000554 <System_Clock_Init+0x1b4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a6a      	ldr	r2, [pc, #424]	; (8000554 <System_Clock_Init+0x1b4>)
 80003ac:	f023 0307 	bic.w	r3, r3, #7
 80003b0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80003b2:	4b68      	ldr	r3, [pc, #416]	; (8000554 <System_Clock_Init+0x1b4>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a67      	ldr	r2, [pc, #412]	; (8000554 <System_Clock_Init+0x1b4>)
 80003b8:	f043 0302 	orr.w	r3, r3, #2
 80003bc:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80003be:	4b66      	ldr	r3, [pc, #408]	; (8000558 <System_Clock_Init+0x1b8>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a65      	ldr	r2, [pc, #404]	; (8000558 <System_Clock_Init+0x1b8>)
 80003c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80003ca:	bf00      	nop
 80003cc:	4b62      	ldr	r3, [pc, #392]	; (8000558 <System_Clock_Init+0x1b8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0f9      	beq.n	80003cc <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80003d8:	2310      	movs	r3, #16
 80003da:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80003dc:	4b5e      	ldr	r3, [pc, #376]	; (8000558 <System_Clock_Init+0x1b8>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a5d      	ldr	r2, [pc, #372]	; (8000558 <System_Clock_Init+0x1b8>)
 80003e2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80003e6:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80003e8:	4b5b      	ldr	r3, [pc, #364]	; (8000558 <System_Clock_Init+0x1b8>)
 80003ea:	685a      	ldr	r2, [r3, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	061b      	lsls	r3, r3, #24
 80003f0:	4959      	ldr	r1, [pc, #356]	; (8000558 <System_Clock_Init+0x1b8>)
 80003f2:	4313      	orrs	r3, r2
 80003f4:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 80003f6:	4b58      	ldr	r3, [pc, #352]	; (8000558 <System_Clock_Init+0x1b8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a57      	ldr	r2, [pc, #348]	; (8000558 <System_Clock_Init+0x1b8>)
 80003fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000400:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000402:	bf00      	nop
 8000404:	4b54      	ldr	r3, [pc, #336]	; (8000558 <System_Clock_Init+0x1b8>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800040c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000410:	d0f8      	beq.n	8000404 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000412:	4b51      	ldr	r3, [pc, #324]	; (8000558 <System_Clock_Init+0x1b8>)
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	4a50      	ldr	r2, [pc, #320]	; (8000558 <System_Clock_Init+0x1b8>)
 8000418:	f023 0303 	bic.w	r3, r3, #3
 800041c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800041e:	4b4e      	ldr	r3, [pc, #312]	; (8000558 <System_Clock_Init+0x1b8>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	4a4d      	ldr	r2, [pc, #308]	; (8000558 <System_Clock_Init+0x1b8>)
 8000424:	f043 0302 	orr.w	r3, r3, #2
 8000428:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800042a:	4b4b      	ldr	r3, [pc, #300]	; (8000558 <System_Clock_Init+0x1b8>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000432:	4a49      	ldr	r2, [pc, #292]	; (8000558 <System_Clock_Init+0x1b8>)
 8000434:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000438:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800043a:	4b47      	ldr	r3, [pc, #284]	; (8000558 <System_Clock_Init+0x1b8>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000442:	4a45      	ldr	r2, [pc, #276]	; (8000558 <System_Clock_Init+0x1b8>)
 8000444:	f043 0310 	orr.w	r3, r3, #16
 8000448:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800044a:	4b43      	ldr	r3, [pc, #268]	; (8000558 <System_Clock_Init+0x1b8>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	4a42      	ldr	r2, [pc, #264]	; (8000558 <System_Clock_Init+0x1b8>)
 8000450:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000454:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000456:	4b40      	ldr	r3, [pc, #256]	; (8000558 <System_Clock_Init+0x1b8>)
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	4a3f      	ldr	r2, [pc, #252]	; (8000558 <System_Clock_Init+0x1b8>)
 800045c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000460:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000462:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <System_Clock_Init+0x1b8>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a3c      	ldr	r2, [pc, #240]	; (8000558 <System_Clock_Init+0x1b8>)
 8000468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800046c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800046e:	bf00      	nop
 8000470:	4b39      	ldr	r3, [pc, #228]	; (8000558 <System_Clock_Init+0x1b8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f9      	beq.n	8000470 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 800047c:	4b36      	ldr	r3, [pc, #216]	; (8000558 <System_Clock_Init+0x1b8>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	4a35      	ldr	r2, [pc, #212]	; (8000558 <System_Clock_Init+0x1b8>)
 8000482:	f023 0303 	bic.w	r3, r3, #3
 8000486:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000488:	4b33      	ldr	r3, [pc, #204]	; (8000558 <System_Clock_Init+0x1b8>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	4a32      	ldr	r2, [pc, #200]	; (8000558 <System_Clock_Init+0x1b8>)
 800048e:	f043 0303 	orr.w	r3, r3, #3
 8000492:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000494:	bf00      	nop
 8000496:	4b30      	ldr	r3, [pc, #192]	; (8000558 <System_Clock_Init+0x1b8>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	f003 030c 	and.w	r3, r3, #12
 800049e:	2b0c      	cmp	r3, #12
 80004a0:	d1f9      	bne.n	8000496 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80004a2:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <System_Clock_Init+0x1b8>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	4a2c      	ldr	r2, [pc, #176]	; (8000558 <System_Clock_Init+0x1b8>)
 80004a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004ac:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80004ae:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <System_Clock_Init+0x1b8>)
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	4a29      	ldr	r2, [pc, #164]	; (8000558 <System_Clock_Init+0x1b8>)
 80004b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004b8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80004ba:	4b27      	ldr	r3, [pc, #156]	; (8000558 <System_Clock_Init+0x1b8>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	4a26      	ldr	r2, [pc, #152]	; (8000558 <System_Clock_Init+0x1b8>)
 80004c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80004c4:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80004c6:	4b24      	ldr	r3, [pc, #144]	; (8000558 <System_Clock_Init+0x1b8>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a23      	ldr	r2, [pc, #140]	; (8000558 <System_Clock_Init+0x1b8>)
 80004cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80004d0:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80004d2:	bf00      	nop
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <System_Clock_Init+0x1b8>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80004e0:	d0f8      	beq.n	80004d4 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <System_Clock_Init+0x1b8>)
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <System_Clock_Init+0x1b8>)
 80004e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80004ec:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <System_Clock_Init+0x1b8>)
 80004f0:	691b      	ldr	r3, [r3, #16]
 80004f2:	4a19      	ldr	r2, [pc, #100]	; (8000558 <System_Clock_Init+0x1b8>)
 80004f4:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80004f8:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <System_Clock_Init+0x1b8>)
 80004fc:	691b      	ldr	r3, [r3, #16]
 80004fe:	4a16      	ldr	r2, [pc, #88]	; (8000558 <System_Clock_Init+0x1b8>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <System_Clock_Init+0x1b8>)
 8000508:	691b      	ldr	r3, [r3, #16]
 800050a:	4a13      	ldr	r2, [pc, #76]	; (8000558 <System_Clock_Init+0x1b8>)
 800050c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000510:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <System_Clock_Init+0x1b8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a10      	ldr	r2, [pc, #64]	; (8000558 <System_Clock_Init+0x1b8>)
 8000518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800051c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800051e:	bf00      	nop
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <System_Clock_Init+0x1b8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f9      	beq.n	8000520 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <System_Clock_Init+0x1b8>)
 800052e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <System_Clock_Init+0x1b8>)
 8000534:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <System_Clock_Init+0x1b8>)
 800053e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <System_Clock_Init+0x1b8>)
 8000542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000546:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40022000 	.word	0x40022000
 8000558:	40021000 	.word	0x40021000

0800055c <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <UART2_Init+0x40>)
 8000562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <UART2_Init+0x40>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <UART2_Init+0x40>)
 800056e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <UART2_Init+0x40>)
 8000574:	f023 030c 	bic.w	r3, r3, #12
 8000578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <UART2_Init+0x40>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000582:	4a06      	ldr	r2, [pc, #24]	; (800059c <UART2_Init+0x40>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 800058c:	f000 f80a 	bl	80005a4 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <UART2_Init+0x44>)
 8000592:	f000 f84f 	bl	8000634 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000
 80005a0:	40004400 	.word	0x40004400

080005a4 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <UART2_GPIO_Init+0x8c>)
 80005aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <UART2_GPIO_Init+0x8c>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 80005b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80005c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ce:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80005d2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80005d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d8:	6a1b      	ldr	r3, [r3, #32]
 80005da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80005e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e8:	6a1b      	ldr	r3, [r3, #32]
 80005ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ee:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80005f2:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80005f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fe:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000602:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000612:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800061e:	f023 030c 	bic.w	r3, r3, #12
 8000622:	6053      	str	r3, [r2, #4]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f023 0201 	bic.w	r2, r3, #1
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f242 028d 	movw	r2, #8333	; 0x208d
 8000672:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f043 020c 	orr.w	r2, r3, #12
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a2c      	ldr	r2, [pc, #176]	; (8000734 <USART_Init+0x100>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d129      	bne.n	80006dc <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f043 0220 	orr.w	r2, r3, #32
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f023 0210 	bic.w	r2, r3, #16
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f023 0201 	bic.w	r2, r3, #1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <USART_Init+0x104>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d10b      	bne.n	80006fc <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6a1b      	ldr	r3, [r3, #32]
 80006e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <USART_Init+0x108>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	4a11      	ldr	r2, [pc, #68]	; (800073c <USART_Init+0x108>)
 80006f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006fa:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f043 0201 	orr.w	r2, r3, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000708:	bf00      	nop
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000716:	bf00      	nop
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f9      	beq.n	8000718 <USART_Init+0xe4>
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40004c00 	.word	0x40004c00
 8000738:	40004400 	.word	0x40004400
 800073c:	40013800 	.word	0x40013800

08000740 <USART_Read_NB>:
 * This version of USART_Read is non-blocking, allowing other functions
 * to occur on the board.
 *
 * return the character received, otherwise return 0.
 */
uint8_t USART_Read_NB (USART_TypeDef * USARTx) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	// USART resets the RXNE flag automatically after reading DR
	if((USARTx->ISR & USART_ISR_RXNE)) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	f003 0320 	and.w	r3, r3, #32
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <USART_Read_NB+0x1e>
		return ((uint8_t)(USARTx->RDR & 0xFF));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000758:	b29b      	uxth	r3, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	e000      	b.n	8000760 <USART_Read_NB+0x20>
	} else {
		return 0;
 800075e:	2300      	movs	r3, #0
	}
	//}
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	e014      	b.n	80007a8 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 800077e:	bf00      	nop
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0f9      	beq.n	8000780 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b29a      	uxth	r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 800079a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800079e:	f000 f819 	bl	80007d4 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d8e6      	bhi.n	800077e <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80007b0:	bf00      	nop
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0f9      	beq.n	80007b2 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	61da      	str	r2, [r3, #28]
}   
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2264      	movs	r2, #100	; 0x64
 80007e0:	fb02 f203 	mul.w	r2, r2, r3
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <USART_Delay+0x3c>)
 80007e6:	fba3 1302 	umull	r1, r3, r3, r2
 80007ea:	1ad2      	subs	r2, r2, r3
 80007ec:	0852      	lsrs	r2, r2, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f9      	bne.n	80007f4 <USART_Delay+0x20>
}
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	24924925 	.word	0x24924925

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <__NVIC_EnableIRQ+0x38>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100

08000850 <init>:
 * This function sets up all the registers with correct bit values
 * to enable the necessary interrupt handlers. It also outputs
 * the initial help information for the project.
 */
static void init()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	// SysTick Interrupt Setup
	systick_registers_t *systick = (systick_registers_t*) 0xE000E010;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <init+0x84>)
 8000858:	607b      	str	r3, [r7, #4]
	systick->CSR &= ~0x7;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f023 0207 	bic.w	r2, r3, #7
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
	systick->RVR &= ~0xFFFFFF;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	605a      	str	r2, [r3, #4]
	systick->RVR |= 0x1387F;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f443 339c 	orr.w	r3, r3, #79872	; 0x13800
 800087a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	6053      	str	r3, [r2, #4]
	systick->CSR = (systick->CSR | 1<<2);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f043 0204 	orr.w	r2, r3, #4
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
	systick->CSR = (systick->CSR | 1<<0);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f043 0201 	orr.w	r2, r3, #1
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]
	systick->CSR = (systick->CSR | 1<<1);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f043 0202 	orr.w	r2, r3, #2
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]

	// USART Interrupt Setup
	USART2->CR1 |= 1<<5;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <init+0x88>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <init+0x88>)
 80008ac:	f043 0320 	orr.w	r3, r3, #32
 80008b0:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 80008b2:	2026      	movs	r0, #38	; 0x26
 80008b4:	f7ff ffae 	bl	8000814 <__NVIC_EnableIRQ>

	// Project Setup
	GPIO_Init();
 80008b8:	f000 f95e 	bl	8000b78 <GPIO_Init>
	printHelp();
 80008bc:	f000 faac 	bl	8000e18 <printHelp>
	writeBulk(remote);
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <init+0x8c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa17 	bl	8000cf8 <writeBulk>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010
 80008d8:	40004400 	.word	0x40004400
 80008dc:	20000004 	.word	0x20000004

080008e0 <SysTick_Handler>:
 * This function is responsible for handling the internal system
 * clock. It counts for a half second, which is used to flash
 * the LEDs for switching to local mode. The one second counter
 * is used for all other normal operations.
 */
void SysTick_Handler() {
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	static uint32_t counter = 0;
	static uint32_t counter2 = 0;
	counter++;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <SysTick_Handler+0x50>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a11      	ldr	r2, [pc, #68]	; (8000930 <SysTick_Handler+0x50>)
 80008ec:	6013      	str	r3, [r2, #0]
	counter2++;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <SysTick_Handler+0x54>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <SysTick_Handler+0x54>)
 80008f6:	6013      	str	r3, [r2, #0]
	if(counter2 == 500) {
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <SysTick_Handler+0x54>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000900:	d105      	bne.n	800090e <SysTick_Handler+0x2e>
		half_second_elapsed = 1;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <SysTick_Handler+0x58>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
		counter2 = 0;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <SysTick_Handler+0x54>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
	}

	if(counter == 1000) {
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <SysTick_Handler+0x50>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000916:	d105      	bne.n	8000924 <SysTick_Handler+0x44>
		one_second_elapsed = 1;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <SysTick_Handler+0x5c>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
		counter = 0;
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Handler+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
	}
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000038 	.word	0x20000038
 8000934:	2000003c 	.word	0x2000003c
 8000938:	20000035 	.word	0x20000035
 800093c:	20000034 	.word	0x20000034

08000940 <USART2_IRQHandler>:
 * This function is responsible for handling any character input
 * from the command line. It will echo the character, and store
 * it into a command. The command will adapt to backspaces and
 * re-writes. When enter is hit, the command will be processed.
 */
void USART2_IRQHandler() {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
	if(remoteMode) {
 8000946:	4b31      	ldr	r3, [pc, #196]	; (8000a0c <USART2_IRQHandler+0xcc>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d056      	beq.n	80009fc <USART2_IRQHandler+0xbc>
		static char command[7];
		static char *cmd_ptr = command;
		uint8_t one_char = 0 ;
 800094e:	2300      	movs	r3, #0
 8000950:	71fb      	strb	r3, [r7, #7]
		one_char = USART_Read_NB(USART2);
 8000952:	482f      	ldr	r0, [pc, #188]	; (8000a10 <USART2_IRQHandler+0xd0>)
 8000954:	f7ff fef4 	bl	8000740 <USART_Read_NB>
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
		if(one_char) {
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d04f      	beq.n	8000a02 <USART2_IRQHandler+0xc2>
			USART_Write( USART2, &one_char, 1 ) ;
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	2201      	movs	r2, #1
 8000966:	4619      	mov	r1, r3
 8000968:	4829      	ldr	r0, [pc, #164]	; (8000a10 <USART2_IRQHandler+0xd0>)
 800096a:	f7ff feff 	bl	800076c <USART_Write>
			*cmd_ptr = one_char;
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <USART2_IRQHandler+0xd4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	701a      	strb	r2, [r3, #0]
			if(one_char == '\r') {
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b0d      	cmp	r3, #13
 800097a:	d117      	bne.n	80009ac <USART2_IRQHandler+0x6c>
				// If enter is hit, print the next line, handle the command,
				// and then reset the command.
				*cmd_ptr = '\0';
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <USART2_IRQHandler+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
				one_char = '\n';
 8000984:	230a      	movs	r3, #10
 8000986:	71fb      	strb	r3, [r7, #7]
				USART_Write( USART2, &one_char, 1 ) ;
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <USART2_IRQHandler+0xd0>)
 8000990:	f7ff feec 	bl	800076c <USART_Write>
				handleCommand(command);
 8000994:	4820      	ldr	r0, [pc, #128]	; (8000a18 <USART2_IRQHandler+0xd8>)
 8000996:	f000 f9c9 	bl	8000d2c <handleCommand>
				memset(command, ' ', sizeof(char)*7);
 800099a:	2207      	movs	r2, #7
 800099c:	2120      	movs	r1, #32
 800099e:	481e      	ldr	r0, [pc, #120]	; (8000a18 <USART2_IRQHandler+0xd8>)
 80009a0:	f000 fdb6 	bl	8001510 <memset>
				cmd_ptr = command;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <USART2_IRQHandler+0xd4>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <USART2_IRQHandler+0xd8>)
 80009a8:	601a      	str	r2, [r3, #0]
		}
	} else {
		// to clear the USART2 interrupt
		USART_Read_NB(USART2);
	}
}
 80009aa:	e02a      	b.n	8000a02 <USART2_IRQHandler+0xc2>
			} else if(one_char == '\b') {
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d11e      	bne.n	80009f0 <USART2_IRQHandler+0xb0>
				*cmd_ptr = '\0';
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <USART2_IRQHandler+0xd4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
				one_char = ' ';
 80009ba:	2320      	movs	r3, #32
 80009bc:	71fb      	strb	r3, [r7, #7]
				USART_Write( USART2, &one_char, 1 ) ;
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	2201      	movs	r2, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <USART2_IRQHandler+0xd0>)
 80009c6:	f7ff fed1 	bl	800076c <USART_Write>
				one_char = '\b';
 80009ca:	2308      	movs	r3, #8
 80009cc:	71fb      	strb	r3, [r7, #7]
				USART_Write( USART2, &one_char, 1 ) ;
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	2201      	movs	r2, #1
 80009d2:	4619      	mov	r1, r3
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <USART2_IRQHandler+0xd0>)
 80009d6:	f7ff fec9 	bl	800076c <USART_Write>
				if(!(cmd_ptr <= command)) {
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <USART2_IRQHandler+0xd4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <USART2_IRQHandler+0xd8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d90e      	bls.n	8000a02 <USART2_IRQHandler+0xc2>
					cmd_ptr--;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <USART2_IRQHandler+0xd4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <USART2_IRQHandler+0xd4>)
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	e008      	b.n	8000a02 <USART2_IRQHandler+0xc2>
				cmd_ptr++;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <USART2_IRQHandler+0xd4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <USART2_IRQHandler+0xd4>)
 80009f8:	6013      	str	r3, [r2, #0]
}
 80009fa:	e002      	b.n	8000a02 <USART2_IRQHandler+0xc2>
		USART_Read_NB(USART2);
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <USART2_IRQHandler+0xd0>)
 80009fe:	f7ff fe9f 	bl	8000740 <USART_Read_NB>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	40004400 	.word	0x40004400
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	20000040 	.word	0x20000040

08000a1c <HAL_GPIO_EXTI_Callback>:
 * as well as when the red and green LED buttons are hit. If the blue
 * button is hit, the state of the system will be switched between
 * local and remote. If the red/green LED button is hit, the respective
 * buttons will be turned on.
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin) {
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2c:	d119      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0x46>
		allOff();
 8000a2e:	f000 fa2f 	bl	8000e90 <allOff>
		if(remoteMode) { // on remote mode switching to manual override
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00b      	beq.n	8000a52 <HAL_GPIO_EXTI_Callback+0x36>
			remoteMode = 0;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
			three_times_flash = 0;
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
			writeBulk(local);
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <HAL_GPIO_EXTI_Callback+0xd0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f954 	bl	8000cf8 <writeBulk>
 8000a50:	e007      	b.n	8000a62 <HAL_GPIO_EXTI_Callback+0x46>
		} else { // on manual override switching to remote
			remoteMode = 1;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
			writeBulk(remote);
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f94b 	bl	8000cf8 <writeBulk>
		}
	}

	if(!remoteMode) {
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d137      	bne.n	8000ada <HAL_GPIO_EXTI_Callback+0xbe>
		// Reading the pin allows for separate functionality on rising/falling edges
		if(GPIO_Pin == G1_Pin && HAL_GPIO_ReadPin(GPIOC, G1_Pin)) {
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	2b80      	cmp	r3, #128	; 0x80
 8000a6e:	d109      	bne.n	8000a84 <HAL_GPIO_EXTI_Callback+0x68>
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	4820      	ldr	r0, [pc, #128]	; (8000af4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a74:	f000 fcf8 	bl	8001468 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <HAL_GPIO_EXTI_Callback+0x68>
			GREEN_LED_On();
 8000a7e:	f7ff fc34 	bl	80002ea <GREEN_LED_On>
 8000a82:	e00b      	b.n	8000a9c <HAL_GPIO_EXTI_Callback+0x80>
		} else if(GPIO_Pin == G1_Pin && !HAL_GPIO_ReadPin(GPIOC, G1_Pin)) {
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	2b80      	cmp	r3, #128	; 0x80
 8000a88:	d108      	bne.n	8000a9c <HAL_GPIO_EXTI_Callback+0x80>
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	4819      	ldr	r0, [pc, #100]	; (8000af4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a8e:	f000 fceb 	bl	8001468 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <HAL_GPIO_EXTI_Callback+0x80>
			GREEN_LED_Off();
 8000a98:	f7ff fc36 	bl	8000308 <GREEN_LED_Off>
		}

		if(GPIO_Pin == R1_Pin && HAL_GPIO_ReadPin(GPIOA, R1_Pin)) {
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aa2:	d10b      	bne.n	8000abc <HAL_GPIO_EXTI_Callback+0xa0>
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f000 fcdc 	bl	8001468 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <HAL_GPIO_EXTI_Callback+0xa0>
			RED_LED_On();
 8000ab6:	f7ff fc45 	bl	8000344 <RED_LED_On>
		} else if(GPIO_Pin == R1_Pin && !HAL_GPIO_ReadPin(GPIOA, R1_Pin)) {
			RED_LED_Off();
		}
	}
}
 8000aba:	e00e      	b.n	8000ada <HAL_GPIO_EXTI_Callback+0xbe>
		} else if(GPIO_Pin == R1_Pin && !HAL_GPIO_ReadPin(GPIOA, R1_Pin)) {
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ac2:	d10a      	bne.n	8000ada <HAL_GPIO_EXTI_Callback+0xbe>
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f000 fccc 	bl	8001468 <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_GPIO_EXTI_Callback+0xbe>
			RED_LED_Off();
 8000ad6:	f7ff fc44 	bl	8000362 <RED_LED_Off>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000036 	.word	0x20000036
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004
 8000af4:	48000800 	.word	0x48000800

08000af8 <run_demo>:
 * remote mode, if a second has passed, and an LED is set to be flashing, then toggle its
 * state, and reset the second flag. If the state is local, then flick the LEDs on and
 * off three times in three seconds, and then reset the half second flag.
 */
void run_demo()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	init();
 8000afc:	f7ff fea8 	bl	8000850 <init>
	while (1) {
		 if(remoteMode) {
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <run_demo+0x70>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d016      	beq.n	8000b36 <run_demo+0x3e>
			 if(one_second_elapsed) {
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <run_demo+0x74>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f6      	beq.n	8000b00 <run_demo+0x8>
			 	if(getRedFlashing()) {
 8000b12:	f000 f9d1 	bl	8000eb8 <getRedFlashing>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <run_demo+0x28>
			 		RED_LED_Toggle();
 8000b1c:	f7ff fc30 	bl	8000380 <RED_LED_Toggle>
			 	}
			 	if(getGreenFlashing()) {
 8000b20:	f000 f9be 	bl	8000ea0 <getGreenFlashing>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <run_demo+0x36>
			 		GREEN_LED_Toggle();
 8000b2a:	f7ff fbfc 	bl	8000326 <GREEN_LED_Toggle>
			 	}
			 	one_second_elapsed = 0;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <run_demo+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e7e4      	b.n	8000b00 <run_demo+0x8>
			 }
		 } else {
			if(half_second_elapsed && three_times_flash < 6) {
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <run_demo+0x78>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0df      	beq.n	8000b00 <run_demo+0x8>
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <run_demo+0x7c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b05      	cmp	r3, #5
 8000b48:	d8da      	bhi.n	8000b00 <run_demo+0x8>
				RED_LED_Toggle();
 8000b4a:	f7ff fc19 	bl	8000380 <RED_LED_Toggle>
				GREEN_LED_Toggle();
 8000b4e:	f7ff fbea 	bl	8000326 <GREEN_LED_Toggle>
				three_times_flash++;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <run_demo+0x7c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <run_demo+0x7c>)
 8000b5e:	701a      	strb	r2, [r3, #0]
				half_second_elapsed = 0;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <run_demo+0x78>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
		 if(remoteMode) {
 8000b66:	e7cb      	b.n	8000b00 <run_demo+0x8>
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000034 	.word	0x20000034
 8000b70:	20000035 	.word	0x20000035
 8000b74:	20000036 	.word	0x20000036

08000b78 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <GPIO_Init+0xf4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <GPIO_Init+0xf4>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <GPIO_Init+0xf4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <GPIO_Init+0xf4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <GPIO_Init+0xf4>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <GPIO_Init+0xf4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <GPIO_Init+0xf4>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a2a      	ldr	r2, [pc, #168]	; (8000c6c <GPIO_Init+0xf4>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <GPIO_Init+0xf4>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <GPIO_Init+0xf4>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a24      	ldr	r2, [pc, #144]	; (8000c6c <GPIO_Init+0xf4>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <GPIO_Init+0xf4>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bf8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	481a      	ldr	r0, [pc, #104]	; (8000c70 <GPIO_Init+0xf8>)
 8000c06:	f000 fa85 	bl	8001114 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R1_Pin;
 8000c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c10:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c14:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f000 fa76 	bl	8001114 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = G1_Pin;
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c2c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c30:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(G1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <GPIO_Init+0xf8>)
 8000c3e:	f000 fa69 	bl	8001114 <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2028      	movs	r0, #40	; 0x28
 8000c48:	f000 fa39 	bl	80010be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4c:	2028      	movs	r0, #40	; 0x28
 8000c4e:	f000 fa52 	bl	80010f6 <HAL_NVIC_EnableIRQ>

	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_5_IRQn Interrupt handler function as well
	// This is the interrupt handler for the "Red" and "Green" buttons (R1 and G1)
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2017      	movs	r0, #23
 8000c58:	f000 fa31 	bl	80010be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c5c:	2017      	movs	r0, #23
 8000c5e:	f000 fa4a 	bl	80010f6 <HAL_NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000800 	.word	0x48000800

08000c74 <EXTI15_10_IRQHandler>:
/*
 * This function is responsible for handling an interrupt from the blue
 * button on the board. It invokes the GPIO handler function with the
 * blue button pin.
 */
void EXTI15_10_IRQHandler() {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c7c:	f000 fc0c 	bl	8001498 <HAL_GPIO_EXTI_IRQHandler>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <EXTI9_5_IRQHandler>:
/*
 * This function is responsible for handling an interrupt from either
 * the Green LED button or Red LED button. It invokes the GPIO handler
 * function with the correct pin that has been activated.
 */
void EXTI9_5_IRQHandler() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_FLAG(G1_Pin)) {
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <EXTI9_5_IRQHandler+0x30>)
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <EXTI9_5_IRQHandler+0x16>
		HAL_GPIO_EXTI_IRQHandler(G1_Pin);
 8000c94:	2080      	movs	r0, #128	; 0x80
 8000c96:	f000 fbff 	bl	8001498 <HAL_GPIO_EXTI_IRQHandler>
	}
	if(__HAL_GPIO_EXTI_GET_FLAG(R1_Pin)) {
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <EXTI9_5_IRQHandler+0x30>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <EXTI9_5_IRQHandler+0x2a>
		HAL_GPIO_EXTI_IRQHandler(R1_Pin);
 8000ca6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000caa:	f000 fbf5 	bl	8001498 <HAL_GPIO_EXTI_IRQHandler>
	}
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <compare_str>:

/*
 * A helper function that compares the contents of
 * two strings by value.
 */
int compare_str(char* str1, char* str2) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	while(*str1 == *str2) {
 8000cc2:	e00b      	b.n	8000cdc <compare_str+0x24>
		if(*str1 == '\0') {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <compare_str+0x18>
			return 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e00c      	b.n	8000cea <compare_str+0x32>
		}
		str1++;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	607b      	str	r3, [r7, #4]
		str2++;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	603b      	str	r3, [r7, #0]
	while(*str1 == *str2) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d0ed      	beq.n	8000cc4 <compare_str+0xc>
	}
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <writeBulk>:

/*
 * This helper function takes in a string and outputs each character
 * in a while loop.
 */
void writeBulk(unsigned char* text) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	unsigned char* text_ptr = text;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60fb      	str	r3, [r7, #12]
	while(*text_ptr != '\0') {
 8000d04:	e007      	b.n	8000d16 <writeBulk+0x1e>
		USART_Write( USART2, text_ptr, 1 );
 8000d06:	2201      	movs	r2, #1
 8000d08:	68f9      	ldr	r1, [r7, #12]
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <writeBulk+0x30>)
 8000d0c:	f7ff fd2e 	bl	800076c <USART_Write>
		text_ptr++;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
	while(*text_ptr != '\0') {
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f3      	bne.n	8000d06 <writeBulk+0xe>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40004400 	.word	0x40004400

08000d2c <handleCommand>:
/*
 * This helper function handles all commands that a user can input.
 * It also provides handling for if a user inputs something not
 * recognized as a valid command.
 */
void handleCommand(char* command) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if(compare_str(command, "HELP\0") == 1) {
 8000d34:	492d      	ldr	r1, [pc, #180]	; (8000dec <handleCommand+0xc0>)
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffbe 	bl	8000cb8 <compare_str>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <handleCommand+0x1c>
		printHelp();
 8000d42:	f000 f869 	bl	8000e18 <printHelp>
	} else if(compare_str(command, "ALLOFF\0") == 1) {
		allOff();
	} else {
		writeBulk(invalid);
	}
}
 8000d46:	e04c      	b.n	8000de2 <handleCommand+0xb6>
	} else if(compare_str(command, "RON\0") == 1) {
 8000d48:	4929      	ldr	r1, [pc, #164]	; (8000df0 <handleCommand+0xc4>)
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffb4 	bl	8000cb8 <compare_str>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d102      	bne.n	8000d5c <handleCommand+0x30>
		redOn();
 8000d56:	f000 f86b 	bl	8000e30 <redOn>
}
 8000d5a:	e042      	b.n	8000de2 <handleCommand+0xb6>
	} else if(compare_str(command, "ROFF\0") == 1) {
 8000d5c:	4925      	ldr	r1, [pc, #148]	; (8000df4 <handleCommand+0xc8>)
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffaa 	bl	8000cb8 <compare_str>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d102      	bne.n	8000d70 <handleCommand+0x44>
		redOff();
 8000d6a:	f000 f86d 	bl	8000e48 <redOff>
}
 8000d6e:	e038      	b.n	8000de2 <handleCommand+0xb6>
	} else if(compare_str(command, "GON\0") == 1) {
 8000d70:	4921      	ldr	r1, [pc, #132]	; (8000df8 <handleCommand+0xcc>)
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa0 	bl	8000cb8 <compare_str>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <handleCommand+0x58>
		greenOn();
 8000d7e:	f000 f86f 	bl	8000e60 <greenOn>
}
 8000d82:	e02e      	b.n	8000de2 <handleCommand+0xb6>
	} else if(compare_str(command, "GOFF\0") == 1) {
 8000d84:	491d      	ldr	r1, [pc, #116]	; (8000dfc <handleCommand+0xd0>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff96 	bl	8000cb8 <compare_str>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d102      	bne.n	8000d98 <handleCommand+0x6c>
		greenOff();
 8000d92:	f000 f871 	bl	8000e78 <greenOff>
}
 8000d96:	e024      	b.n	8000de2 <handleCommand+0xb6>
	} else if(compare_str(command, "RFLASH\0") == 1) {
 8000d98:	4919      	ldr	r1, [pc, #100]	; (8000e00 <handleCommand+0xd4>)
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff8c 	bl	8000cb8 <compare_str>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d103      	bne.n	8000dae <handleCommand+0x82>
		redFlashing = 1;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <handleCommand+0xd8>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	e019      	b.n	8000de2 <handleCommand+0xb6>
	} else if(compare_str(command, "GFLASH\0") == 1) {
 8000dae:	4916      	ldr	r1, [pc, #88]	; (8000e08 <handleCommand+0xdc>)
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff81 	bl	8000cb8 <compare_str>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d103      	bne.n	8000dc4 <handleCommand+0x98>
		greenFlashing = 1;
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <handleCommand+0xe0>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
}
 8000dc2:	e00e      	b.n	8000de2 <handleCommand+0xb6>
	} else if(compare_str(command, "ALLOFF\0") == 1) {
 8000dc4:	4912      	ldr	r1, [pc, #72]	; (8000e10 <handleCommand+0xe4>)
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff76 	bl	8000cb8 <compare_str>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d102      	bne.n	8000dd8 <handleCommand+0xac>
		allOff();
 8000dd2:	f000 f85d 	bl	8000e90 <allOff>
}
 8000dd6:	e004      	b.n	8000de2 <handleCommand+0xb6>
		writeBulk(invalid);
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <handleCommand+0xe8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff8b 	bl	8000cf8 <writeBulk>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	08001670 	.word	0x08001670
 8000df0:	08001678 	.word	0x08001678
 8000df4:	08001680 	.word	0x08001680
 8000df8:	08001688 	.word	0x08001688
 8000dfc:	08001690 	.word	0x08001690
 8000e00:	08001698 	.word	0x08001698
 8000e04:	20000048 	.word	0x20000048
 8000e08:	080016a0 	.word	0x080016a0
 8000e0c:	2000004c 	.word	0x2000004c
 8000e10:	080016a8 	.word	0x080016a8
 8000e14:	20000014 	.word	0x20000014

08000e18 <printHelp>:

/*
 * TODO: Describe this function.
 */
void printHelp() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	writeBulk(output);
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <printHelp+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff69 	bl	8000cf8 <writeBulk>
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000010 	.word	0x20000010

08000e30 <redOn>:

/*
 * A helper function that turns the red LED off.
 */
void redOn() {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	redFlashing = 0;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <redOn+0x14>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
	RED_LED_On();
 8000e3a:	f7ff fa83 	bl	8000344 <RED_LED_On>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000048 	.word	0x20000048

08000e48 <redOff>:

/*
 * A helper function that turns the red LED off.
 */
void redOff() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	redFlashing = 0;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <redOff+0x14>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	RED_LED_Off();
 8000e52:	f7ff fa86 	bl	8000362 <RED_LED_Off>
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000048 	.word	0x20000048

08000e60 <greenOn>:

/*
 * A helper function that turns the green LED on.
 */
void greenOn() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	greenFlashing = 0;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <greenOn+0x14>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	GREEN_LED_On();
 8000e6a:	f7ff fa3e 	bl	80002ea <GREEN_LED_On>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000004c 	.word	0x2000004c

08000e78 <greenOff>:

/*
 * A helper function that turns the green LED off.
 */
void greenOff() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	greenFlashing = 0;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <greenOff+0x14>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
	GREEN_LED_Off();
 8000e82:	f7ff fa41 	bl	8000308 <GREEN_LED_Off>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000004c 	.word	0x2000004c

08000e90 <allOff>:

/*
 * A helper function that turns all LEDs off by calling their
 * respective off functions.
 */
void allOff() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	redOff();
 8000e94:	f7ff ffd8 	bl	8000e48 <redOff>
	greenOff();
 8000e98:	f7ff ffee 	bl	8000e78 <greenOff>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <getGreenFlashing>:

/*
 * A helper function that returns the whether or not to flash
 * the Green LED.
 */
int getGreenFlashing() {
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	return greenFlashing;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <getGreenFlashing+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	2000004c 	.word	0x2000004c

08000eb8 <getRedFlashing>:

/*
 * A helper function that returns the whether or not to flash
 * the Red LED.
 */
int getRedFlashing() {
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
	return redFlashing;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <getRedFlashing+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000048 	.word	0x20000048

08000ed0 <main>:
#include "LED.h"
#include "UART.h"
#include "demo.h"

	
int main(void){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000ed4:	f7ff fa64 	bl	80003a0 <System_Clock_Init>
	LED_Init();
 8000ed8:	f7ff f9f4 	bl	80002c4 <LED_Init>
	UART2_Init();
 8000edc:	f7ff fb3e 	bl	800055c <UART2_Init>
	
	// application run function
	run_demo() ;
 8000ee0:	f7ff fe0a 	bl	8000af8 <run_demo>
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <SystemInit+0x64>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <SystemInit+0x64>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <SystemInit+0x68>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <SystemInit+0x68>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <SystemInit+0x68>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <SystemInit+0x68>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <SystemInit+0x68>)
 8000f18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <SystemInit+0x68>)
 8000f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <SystemInit+0x68>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <SystemInit+0x68>)
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <SystemInit+0x68>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SystemInit+0x64>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	609a      	str	r2, [r3, #8]
#endif
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	40021000 	.word	0x40021000

08000f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f5c:	f7ff ffc6 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	; (8000f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <LoopForever+0xe>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	; (8000fa4 <LoopForever+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f86:	f000 fa9f 	bl	80014c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8a:	f7ff ffa1 	bl	8000ed0 <main>

08000f8e <LoopForever>:

LoopForever:
    b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f9c:	080016b8 	.word	0x080016b8
  ldr r2, =_sbss
 8000fa0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000fa4:	20000050 	.word	0x20000050

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>
	...

08000fac <__NVIC_GetPriorityGrouping>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_EnableIRQ>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db0b      	blt.n	8000ff2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 021f 	and.w	r2, r3, #31
 8000fe0:	4907      	ldr	r1, [pc, #28]	; (8001000 <__NVIC_EnableIRQ+0x38>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e100 	.word	0xe000e100

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff6c 	bl	8000fac <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ffbc 	bl	8001058 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff8b 	bl	8001004 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5f 	bl	8000fc8 <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e17f      	b.n	8001424 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8171 	beq.w	800141e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d005      	beq.n	8001154 <HAL_GPIO_Init+0x40>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d130      	bne.n	80011b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800118a:	2201      	movs	r2, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	f003 0201 	and.w	r2, r3, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d118      	bne.n	80011f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	08db      	lsrs	r3, r3, #3
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	6939      	ldr	r1, [r7, #16]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80ac 	beq.w	800141e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <HAL_GPIO_Init+0x330>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	4a5e      	ldr	r2, [pc, #376]	; (8001444 <HAL_GPIO_Init+0x330>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6613      	str	r3, [r2, #96]	; 0x60
 80012d2:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <HAL_GPIO_Init+0x330>)
 80012d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012de:	4a5a      	ldr	r2, [pc, #360]	; (8001448 <HAL_GPIO_Init+0x334>)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001308:	d025      	beq.n	8001356 <HAL_GPIO_Init+0x242>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4f      	ldr	r2, [pc, #316]	; (800144c <HAL_GPIO_Init+0x338>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d01f      	beq.n	8001352 <HAL_GPIO_Init+0x23e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4e      	ldr	r2, [pc, #312]	; (8001450 <HAL_GPIO_Init+0x33c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d019      	beq.n	800134e <HAL_GPIO_Init+0x23a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4d      	ldr	r2, [pc, #308]	; (8001454 <HAL_GPIO_Init+0x340>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0x236>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4c      	ldr	r2, [pc, #304]	; (8001458 <HAL_GPIO_Init+0x344>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00d      	beq.n	8001346 <HAL_GPIO_Init+0x232>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4b      	ldr	r2, [pc, #300]	; (800145c <HAL_GPIO_Init+0x348>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0x22e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4a      	ldr	r2, [pc, #296]	; (8001460 <HAL_GPIO_Init+0x34c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_GPIO_Init+0x22a>
 800133a:	2306      	movs	r3, #6
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x244>
 800133e:	2307      	movs	r3, #7
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x244>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x244>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x244>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x244>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x244>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x244>
 8001356:	2300      	movs	r3, #0
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001368:	4937      	ldr	r1, [pc, #220]	; (8001448 <HAL_GPIO_Init+0x334>)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_GPIO_Init+0x350>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_GPIO_Init+0x350>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_GPIO_Init+0x350>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_GPIO_Init+0x350>)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_GPIO_Init+0x350>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_GPIO_Init+0x350>)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_GPIO_Init+0x350>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_GPIO_Init+0x350>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa22 f303 	lsr.w	r3, r2, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f47f ae78 	bne.w	8001124 <HAL_GPIO_Init+0x10>
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800
 8001454:	48000c00 	.word	0x48000c00
 8001458:	48001000 	.word	0x48001000
 800145c:	48001400 	.word	0x48001400
 8001460:	48001800 	.word	0x48001800
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e001      	b.n	800148a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fab0 	bl	8000a1c <HAL_GPIO_EXTI_Callback>
  }
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40010400 	.word	0x40010400

080014c8 <__libc_init_array>:
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	4d0d      	ldr	r5, [pc, #52]	; (8001500 <__libc_init_array+0x38>)
 80014cc:	4c0d      	ldr	r4, [pc, #52]	; (8001504 <__libc_init_array+0x3c>)
 80014ce:	1b64      	subs	r4, r4, r5
 80014d0:	10a4      	asrs	r4, r4, #2
 80014d2:	2600      	movs	r6, #0
 80014d4:	42a6      	cmp	r6, r4
 80014d6:	d109      	bne.n	80014ec <__libc_init_array+0x24>
 80014d8:	4d0b      	ldr	r5, [pc, #44]	; (8001508 <__libc_init_array+0x40>)
 80014da:	4c0c      	ldr	r4, [pc, #48]	; (800150c <__libc_init_array+0x44>)
 80014dc:	f000 f820 	bl	8001520 <_init>
 80014e0:	1b64      	subs	r4, r4, r5
 80014e2:	10a4      	asrs	r4, r4, #2
 80014e4:	2600      	movs	r6, #0
 80014e6:	42a6      	cmp	r6, r4
 80014e8:	d105      	bne.n	80014f6 <__libc_init_array+0x2e>
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
 80014ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80014f0:	4798      	blx	r3
 80014f2:	3601      	adds	r6, #1
 80014f4:	e7ee      	b.n	80014d4 <__libc_init_array+0xc>
 80014f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80014fa:	4798      	blx	r3
 80014fc:	3601      	adds	r6, #1
 80014fe:	e7f2      	b.n	80014e6 <__libc_init_array+0x1e>
 8001500:	080016b0 	.word	0x080016b0
 8001504:	080016b0 	.word	0x080016b0
 8001508:	080016b0 	.word	0x080016b0
 800150c:	080016b4 	.word	0x080016b4

08001510 <memset>:
 8001510:	4402      	add	r2, r0
 8001512:	4603      	mov	r3, r0
 8001514:	4293      	cmp	r3, r2
 8001516:	d100      	bne.n	800151a <memset+0xa>
 8001518:	4770      	bx	lr
 800151a:	f803 1b01 	strb.w	r1, [r3], #1
 800151e:	e7f9      	b.n	8001514 <memset+0x4>

08001520 <_init>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr

0800152c <_fini>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr
